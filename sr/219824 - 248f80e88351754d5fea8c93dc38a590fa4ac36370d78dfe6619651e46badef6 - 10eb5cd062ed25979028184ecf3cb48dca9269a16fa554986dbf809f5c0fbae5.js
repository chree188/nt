var Deposit=function(a){a&&(a=JSON.parse(a),this.amount=new BigNumber(a.amount),this.owners=a.owners,this.threshold=a.threshold,this.id=a.id)},MultiSig=function(){LocalContractStorage.defineMapProperty(this,"deposits",{parse:function(a){return new Deposit(a)},stringify:function(a){return JSON.stringify(a)}})};
MultiSig.prototype={init:function(){},deposit:function(a,c,b){var f=Blockchain.transaction.from,e=Blockchain.transaction.value;b=new BigNumber(b);if(this.deposits.get(a))throw Error("Conflicting ID.");if(e.lte(0))throw Error("Amount is negative or zero.");if(!Array.isArray(c))throw Error("Sig addresses must be array.");if(0==c.length)throw Error("At least one sig address has to be specified.");if(10<c.length)throw Error("Too many sig addresses specified.");c.forEach(function(a){if(0==Blockchain.verifyAddress(a))throw Error("Invalid address.");
});if(1>b)throw Error("At least one signature is required.");if(1>b)throw Error("At least one signature is required.");if(b>c.length)throw Error("Threshold is greater than number of sig addresses.");var d=new Deposit;d.amount=e;d.owners=c.reduce(function(a,b){a[b]=!1;return a},{});d.threshold=b;d.from=f;d.id=a;this.deposits.put(a,d);return d},spend:function(a,c){var b=this.deposits.get(a);if(!b)throw Error("Deposit is not found.");var f=Blockchain.transaction.from;if(!(f in b.owners))throw Error("Not in the list of owners.");
if(0==Blockchain.verifyAddress(c))throw Error("Invalid address.");b.owners[f]=c;var e=0;Object.getOwnPropertyNames(b.owners).forEach(function(a){b.owners[a]==c&&e++});e>=b.threshold&&b.amount.gt(0)&&(this._transfer(c,b.amount),b.amount=new BigNumber(0));this.deposits.set(a,b);return b},status:function(a){a=this.deposits.get(a);if(!a)throw Error("Deposit is not found.");return a},_transfer:function(a,c){var b=Blockchain.transfer(a,c);console.log("transfer result:",b);Event.Trigger("transfer",{Transfer:{from:Blockchain.transaction.to,
to:a,value:c}})}};module.exports=MultiSig;